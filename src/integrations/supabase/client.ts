
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logger } from '@/lib/logger';

// SEGURANÇA: Credenciais obtidas das variáveis de ambiente
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validação de credenciais críticas
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('❌ ERRO CRÍTICO: Credenciais Supabase não configuradas. Verifique as variáveis VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY no arquivo .env');
}

// SEGURANÇA: Detectar ambiente para configurar logs
const isProduction = import.meta.env.PROD || import.meta.env.VITE_NODE_ENV === 'production';
const isDevelopment = import.meta.env.DEV || import.meta.env.VITE_NODE_ENV === 'development';

// SEGURANÇA: Custom fetch com interceptação de logs
const secureSupabaseFetch = (url: string, options: RequestInit = {}) => {
  return fetch(url, options)
    .then(response => {
      // Em produção, não logar URLs que contêm dados sensíveis
      if (!response.ok && !isProduction) {
        logger.database('warn', `Supabase request failed: ${response.status}`, {
          status: response.status,
          statusText: response.statusText,
          // SEGURANÇA: Não logar a URL completa que pode conter IDs
          endpoint: url.split('?')[0].split('/').pop()
        });
      }
      
      // Em produção, suprimir erros de rede do console
      if (!response.ok && isProduction) {
        // Capturar erro silenciosamente para auditoria interna
        logger.securityAlert('Supabase request failed in production', {
          status: response.status,
          endpoint: '[REDACTED]'
        });
      }
      
      return response;
    })
    .catch(error => {
      if (!isProduction) {
        logger.database('error', 'Supabase network error', { error: error.message });
      } else {
        // Em produção, log seguro sem dados sensíveis
        logger.securityAlert('Network error in production', {
          type: 'connection_error'
        });
      }
      throw error;
    });
};

// SEGURANÇA: Configuração do cliente com supressão de logs
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'x-client-info': 'slotmaster-delivery-management'
    },
    // SEGURANÇA CRÍTICA: Custom fetch para interceptar logs
    fetch: secureSupabaseFetch
  },
  // SEGURANÇA: Desabilitar logs automáticos do Supabase em produção
  ...(isProduction && {
    realtime: {
      params: {
        log_level: 'fatal' // Apenas erros críticos
      }
    }
  })
});

// SEGURANÇA: Interceptor adicional para métodos específicos do Supabase
const originalFrom = supabase.from;
supabase.from = function(table: string) {
  const query = originalFrom.call(this, table);
  
  // Interceptar erros específicos das queries
  const originalSelect = query.select;
  query.select = function(columns?: string) {
    const selectQuery = originalSelect.call(this, columns);
    
    // Interceptar o resultado para capturar erros silenciosamente
    const originalThen = selectQuery.then;
    selectQuery.then = function(onFulfilled?: any, onRejected?: any) {
      return originalThen.call(this, 
        (data: any) => {
          // Success - sem logs em produção
          if (!isProduction && data?.error) {
            logger.database('info', `Query to ${table} completed with error`, {
              table,
              errorMessage: data.error.message
            });
          }
          return onFulfilled ? onFulfilled(data) : data;
        },
        (error: any) => {
          // Error handling
          if (isProduction) {
            // SEGURANÇA: Log sanitizado em produção
            logger.securityAlert('Database query error in production', {
              table: '[REDACTED]',
              hasError: true
            });
          } else {
            logger.database('error', `Query to ${table} failed`, {
              table,
              error: error?.message || error
            });
          }
          return onRejected ? onRejected(error) : Promise.reject(error);
        }
      );
    };
    
    return selectQuery;
  };
  
  return query;
};

// SEGURANÇA: Override console methods específicos do Supabase em produção
if (isProduction) {
  // Interceptar console.warn que o Supabase usa para network errors
  const originalWarn = console.warn;
  console.warn = (...args: any[]) => {
    const message = args.join(' ');
    
    // Suprimir warnings do Supabase que contenham dados sensíveis
    if (message.includes('supabase.co') || 
        message.includes('Bad Request') || 
        message.includes('empresa_id') ||
        message.includes('404') ||
        message.includes('400')) {
      // Não fazer nada - suprimido em produção
      return;
    }
    
    // Outros warnings passam normalmente
    originalWarn.apply(console, args);
  };
  
  // Interceptar console.error para erros do Supabase
  const originalError = console.error;
  console.error = (...args: any[]) => {
    const message = args.join(' ');
    
    // Suprimir erros do Supabase com dados sensíveis
    if (message.includes('supabase.co') || 
        message.includes('empresa_id') ||
        message.includes('GET ') ||
        message.includes('POST ')) {
      // Log seguro para auditoria interna
      logger.securityAlert('Supabase error suppressed in production', {
        timestamp: new Date().toISOString()
      });
      return;
    }
    
    // Outros erros passam com sanitização
    const sanitizedArgs = args.map(arg => {
      if (typeof arg === 'string') {
        return arg.replace(/[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}/gi, '[UUID]')
                 .replace(/\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b/g, '[EMAIL]');
      }
      return arg;
    });
    
    originalError.apply(console, sanitizedArgs);
  };
}

// SEGURANÇA: Adicionar handler de erro global para o Supabase
if (typeof window !== 'undefined') {
  window.addEventListener('unhandledrejection', (event) => {
    const error = event.reason;
    
    // Capturar erros do Supabase especificamente
    if (error && error.message && error.message.includes('supabase')) {
      if (isProduction) {
        // Prevenir que apareça no console
        event.preventDefault();
        
        // Log seguro para auditoria
        logger.securityAlert('Unhandled Supabase error in production', {
          type: 'unhandled_rejection',
          timestamp: new Date().toISOString()
        });
      } else {
        logger.database('error', 'Unhandled Supabase rejection', {
          error: error.message
        });
      }
    }
  });
}
